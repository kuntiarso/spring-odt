services:
  springodt-mysql:
    image: mysql:8.0
    container_name: springodt-mysql
    ports:
      - 3306:3306
    volumes:
      - springodt-mysql-local-data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_LOCAL_ROOT_PASSWORD}
      - MYSQL_USER=appuser
      - MYSQL_PASSWORD=${MYSQL_LOCAL_PASSWORD}
      - MYSQL_DATABASE=appodt
    restart: unless-stopped
  springodt-redis:
    image: redis:8.2
    container_name: springodt-redis
    command: >
      sh -c "exec redis-server --requirepass $$REDIS_PASSWORD"
    ports:
      - 6379:6379
    volumes:
      - springodt-redis-local-data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_LOCAL_PASSWORD}
    restart: unless-stopped
  springodt-rabbitmq:
    image: rabbitmq:4.1-management
    container_name: springodt-rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - springodt-rabbitmq-local-data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=appuser
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_LOCAL_PASSWORD}
    restart: unless-stopped
  springodt-prometheus:
    image: prom/prometheus:v3.5.0
    container_name: springodt-prometheus
    command: --config.file=/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    volumes:
      - ./.prom/prometheus.yml:/etc/prometheus/prometheus.yml
      - springodt-prometheus-local-data:/prometheus
    restart: unless-stopped
  springodt-grafana:
    image: grafana/grafana:12.1
    container_name: springodt-grafana
    ports:
      - 3000:3000
    volumes:
      - springodt-grafana-local-data:/var/lib/grafana
    depends_on:
      - springodt-prometheus
    restart: unless-stopped
  springodt-loki:
    image: grafana/loki:3.5
    container_name: springodt-loki
    command: --config.file=/etc/loki/local-config.yaml
    ports:
      - 3100:3100
    volumes:
      - ./.grafana/loki-config.yaml:/etc/loki/local-config.yaml
      - springodt-loki-local-data:/loki
    restart: unless-stopped
  springodt-promtail:
    image: grafana/promtail:3.5
    container_name: springodt-promtail
    command: --config.file=/etc/promtail/config.yml
    volumes:
      - ./.grafana/promtail-config.yml:/etc/promtail/config.yml
      - /var/log/journal:/var/log/journal:ro # give access to journald logs
      - /etc/machine-id:/etc/machine-id:ro # required for journal reader
    depends_on:
      - springodt-loki
    restart: unless-stopped
  springodt-tempo:
    image: grafana/tempo:2.8.2
    container_name: springodt-tempo
    command: --config.file=/etc/tempo.yaml
    ports:
      - 3200:3200
    volumes:
      - ./.grafana/tempo-config.yaml:/etc/tempo.yaml
      - springodt-tempo-local-data:/var/tempo
    restart: unless-stopped
  springodt-otel-collector:
    image: otel/opentelemetry-collector-contrib:0.135.0
    container_name: springodt-otel-collector
    command: --config=/etc/otelcol-contrib/config.yaml
    ports:
      - 1888:1888 # pprof extension
      - 8888:8888 # prometheus metrics exposed by the collector
      - 8889:8889 # prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317 # otlp grpc receiver
      - 4318:4318 # otlp http receiver
      - 55679:55679 # zpages extension
    volumes:
      - ./.otel/collector-config.yaml:/etc/otelcol-contrib/config.yaml
    restart: unless-stopped
  springodt-token-service:
    image: ghcr.io/kuntiarso/spring-odt-tokenservice:latest
    container_name: springodt-token-service
    command: >
      java -javaagent:/otel/opentelemetry-javaagent.jar
           -jar /app/token-service.jar
    volumes:
      - ${HOME}/project/agent/opentelemetry-javaagent.jar:/otel/opentelemetry-javaagent.jar
    environment:
      # otel javaagent
      - OTEL_SERVICE_NAME=token-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=springodt-otel-collector:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_METRICS_EXPORTER=otlp
      - OTEL_LOGS_EXPORTER=none
      # spring mysql
      - SPRING_DATASOURCE_URL=jdbc:mysql://springodt-mysql:3306/appodt?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_LOCAL_ROOT_PASSWORD}
      # spring redis
      - SPRING_DATA_REDIS_HOST=springodt-redis
      - SPRING_DATA_REDIS_PASSWORD=${REDIS_LOCAL_PASSWORD}
      # spring doku
      - DOKU_MERCHANT_KEY_STORE_PASSWORD=${DOKU_LOCAL_KEYSTORE_PASSWORD}
      - DOKU_MERCHANT_PRIVATE_KEY_PASSPHRASE=${DOKU_LOCAL_KEYSTORE_PASSWORD}
      - DOKU_API_KEY=${DOKU_LOCAL_API_KEY}
    depends_on:
      - springodt-mysql
      - springodt-redis
      - springodt-otel-collector
    restart: unless-stopped
  springodt-va-service:
    image: ghcr.io/kuntiarso/spring-odt-virtualaccountservice:latest
    container_name: springodt-va-service
    command: >
      java -javaagent:/otel/opentelemetry-javaagent.jar
           -jar /app/virtual-account-service.jar
    volumes:
      - ${HOME}/project/agent/opentelemetry-javaagent.jar:/otel/opentelemetry-javaagent.jar
    environment:
      # otel javaagent
      - OTEL_SERVICE_NAME=va-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=springodt-otel-collector:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_METRICS_EXPORTER=otlp
      - OTEL_LOGS_EXPORTER=none
      # spring mysql
      - SPRING_DATASOURCE_URL=jdbc:mysql://springodt-mysql:3306/appodt?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_LOCAL_ROOT_PASSWORD}
      # spring rabbitmq
      - SPRING_RABBITMQ_HOST=springodt-rabbitmq
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_LOCAL_PASSWORD}
      # spring doku
      - DOKU_API_KEY=${DOKU_LOCAL_API_KEY}
    depends_on:
      - springodt-mysql
      - springodt-rabbitmq
      - springodt-otel-collector
    restart: unless-stopped
  springodt-payment-service:
    image: ghcr.io/kuntiarso/spring-odt-paymentservice:latest
    container_name: springodt-payment-service
    command: >
      java -javaagent:/otel/opentelemetry-javaagent.jar
           -jar /app/payment-service.jar
    ports:
      - 43203:43203
    volumes:
      - ${HOME}/project/agent/opentelemetry-javaagent.jar:/otel/opentelemetry-javaagent.jar
    environment:
      # otel javaagent
      - OTEL_SERVICE_NAME=payment-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=springodt-otel-collector:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_METRICS_EXPORTER=otlp
      - OTEL_LOGS_EXPORTER=none
      # spring mysql
      - SPRING_DATASOURCE_URL=jdbc:mysql://springodt-mysql:3306/appodt?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_LOCAL_ROOT_PASSWORD}
      # spring redis
      - SPRING_DATA_REDIS_HOST=springodt-redis
      - SPRING_DATA_REDIS_PASSWORD=${REDIS_LOCAL_PASSWORD}
      # spring rabbitmq
      - SPRING_RABBITMQ_HOST=springodt-rabbitmq
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_LOCAL_PASSWORD}
      # spring doku
      - DOKU_API_KEY=${DOKU_LOCAL_API_KEY}
      # spring token-svc
      - TOKENSERVICE_API_BASE_URL=http://springodt-token-service:43201
      # spring va-svc
      - VASERVICE_API_BASE_URL=http://springodt-va-service:43202
    depends_on:
      - springodt-mysql
      - springodt-redis
      - springodt-rabbitmq
      - springodt-otel-collector
    restart: unless-stopped

volumes:
  springodt-mysql-local-data:
    name: springodt-mysql-local-data
  springodt-redis-local-data:
    name: springodt-redis-local-data
  springodt-rabbitmq-local-data:
    name: springodt-rabbitmq-local-data
  springodt-prometheus-local-data:
    name: springodt-prometheus-local-data
  springodt-grafana-local-data:
    name: springodt-grafana-local-data
  springodt-loki-local-data:
    name: springodt-loki-local-data
  springodt-tempo-local-data:
    name: springodt-tempo-local-data